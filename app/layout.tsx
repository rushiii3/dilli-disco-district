/* eslint-disable @typescript-eslint/no-explicit-any */
import type { Metadata } from "next";
import "./globals.css";
// import Navbar from "@/components/navbar";
// import { OverlayProvider } from "@/components/overlay-provider";
import localFont from "next/font/local";
import MainLayout from "@/components/MainLayout";
import Providers from "@/provider";
import client from "@/lib/shopify-client";
import MenuLoader from "@/components/MenuLoader";
import Navbar2 from "@/components/navbar2";
import NextTopLoader from 'nextjs-toploader';
import { CART_CREATE_QUERY, VERIFY_CART_QUERY } from "@/lib/queries";
import { cookies } from "next/headers";
import { GenerateCartToken } from "@/lib/cookie";

// import Navbar2 from "@/components/navbar2";

const basis33 = localFont({
  src: "../font/basis33.ttf",
  display: "swap",
  variable: "--font-basis33",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const cookieStore = await cookies();
  const { data } = await client.request(`query {
    collections(first: 25) {
      edges {
        node {
          handle
          title
        }
      }
    }
  }`);
  const cookieCartId = cookieStore.get("shopify_cart_id")?.value || null;
  console.log(cookieCartId);
  if (!cookieCartId) {
    console.log("generatingggg");
    // GenerateCartToken();
    const url =
      typeof window === "undefined"
        ? `${process.env.NEXT_PUBLIC_SITE_URL}/api/cart/create`
        : `/api/cart/create`;
    const res = await fetch(url, { cache: "no-store" });

    if (!res.ok) {
      throw new Error("Failed to fetch collection products");
    }

    return res.json();
  } else {
    const { data: cookieCartID } = await client.request(VERIFY_CART_QUERY, {
      variables: {
        cartId: cookieCartId
      }
    });
    console.log(cookieCartID);
  }


  const collections = data.collections.edges.map((item: any) => ({
    id: item.node.id,
    handle: item.node.handle,
    title: item.node.title,
  }));
  return (
    <html lang="en">
      <body className={` ${basis33.variable} antialiased bg-gray-300`}>
        <NextTopLoader />
        {/* <Navbar /> */}
        <Navbar2 />
        {/* <OverlayProvider>{children}</OverlayProvider> */}
        <MenuLoader collections={collections} />
        <Providers><MainLayout>{children}</MainLayout></Providers>

      </body>
    </html>
  );
}
